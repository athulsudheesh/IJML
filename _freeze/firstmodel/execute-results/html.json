{
  "hash": "39c77b3d0444c0961df09062e418654d",
  "result": {
    "markdown": "---\nexecute:\n  freeze: true\n---\n\n# Your First Model\n\n:::{.callout-caution icon=\"false\"}\n# In this chapter you'll learn:\n\n1. What is machine learning and what are the different types of learning algorithms.\n2. What do you mean by a model in machine learning.\n3. How to implement a simple model using `ScikitLearn.jl`\n:::\n\n## What is Machine Learning? {#sec-ml}\n\nMachine Learning is a sub-field of statistics and optimization where your goal is to design, develop, and analyze algorithms that can learn patterns in the data. Algorithms can be thought of as procedures you need to follow to achieve a goal. Some examples of instances in your life where you use an algorithm include recipes for food, instructions for the direction to a place, strategies for solving a math problem, etc. (Computer algorithms are definitely different from the above examples, but I hope you got the general gist of what an algorithm means) Let's take the example of food recipes to understand some concepts in machine learning further. \n\nEveryone who has learned to cook by themselves knows that the meal isn't guaranteed to taste that well the first time they try a new recipe. But with multiple attempts, you learn to adjust the spiciness, sourness, sweetness, gravy level, etc., to the right proportion that you will be successful in preparing an outstanding meal. If they were to record each of their attempts in a table, it would have looked something like this: \n\n::: {.cell tbl-cap='Food ingredients and their proportions.' execution_count=1}\n\n::: {#reiepe_data .cell-output-display execution_count=2}\n```{=html}\n<div class=\"data-frame\"><p>10 rows Ã— 7 columns</p><table class=\"data-frame\"><thead><tr><th></th><th>Chilly_Powder</th><th>Sugar</th><th>Salt</th><th>Pepper</th><th>Broth_Oz</th><th>Serves</th><th>Tastes</th></tr><tr><th></th><th title=\"Float64\">Float64</th><th title=\"Int64\">Int64</th><th title=\"Float64\">Float64</th><th title=\"Int64\">Int64</th><th title=\"Float64\">Float64</th><th title=\"Int64\">Int64</th><th title=\"String\">String</th></tr></thead><tbody><tr><th>1</th><td>1.5</td><td>3</td><td>2.5</td><td>2</td><td>3.5</td><td>5</td><td>Non-Edible</td></tr><tr><th>2</th><td>2.0</td><td>1</td><td>3.0</td><td>4</td><td>9.5</td><td>4</td><td>Non-Edible</td></tr><tr><th>3</th><td>1.5</td><td>4</td><td>2.5</td><td>3</td><td>6.5</td><td>2</td><td>Best</td></tr><tr><th>4</th><td>1.5</td><td>4</td><td>2.5</td><td>0</td><td>5.0</td><td>5</td><td>Edible</td></tr><tr><th>5</th><td>1.5</td><td>5</td><td>1.5</td><td>4</td><td>8.5</td><td>3</td><td>Non-Edible</td></tr><tr><th>6</th><td>3.0</td><td>5</td><td>0.5</td><td>2</td><td>3.5</td><td>2</td><td>Non-Edible</td></tr><tr><th>7</th><td>1.0</td><td>4</td><td>0.0</td><td>3</td><td>9.0</td><td>4</td><td>Non-Edible</td></tr><tr><th>8</th><td>2.5</td><td>3</td><td>2.0</td><td>2</td><td>11.5</td><td>1</td><td>Non-Edible</td></tr><tr><th>9</th><td>3.0</td><td>0</td><td>2.0</td><td>0</td><td>11.0</td><td>2</td><td>Average</td></tr><tr><th>10</th><td>1.0</td><td>3</td><td>0.5</td><td>4</td><td>12.0</td><td>1</td><td>Edible</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n*Note: Values in the above table were randomly generated.*\n\nIn most cases, a table like the above one is called the data and each of your attempts (each row) is called an observation. With a data like this I can do 2 things: \n\n1. Learn how values for each of `Chilly_Powder`, `Sugar`, `Salt`, `Pepper`, `Broth_Oz` and `Serves` influence the `Tastes` and use that information to come up with the best combination of values to ensure `Best` taste all the time. This is called ***inferential modeling***. \n2. Given a set of values for `Chilly_Powder`, `Sugar`, `Salt`, `Pepper`, `Broth_Oz` and `Serves`, I can predict if the meal is going to be `Edible` or not. This is called ***predictive modeling***.\n\nIf we use the machine learning terminologies, the columns `Chilly_Powder`, `Sugar`, `Salt`, `Pepper`, `Broth_Oz` and `Serves` are called ***features*** and the column `Tastes` is called ***target***. The degree of effect each variable has on the `Tastes` are called parameters. \n\nThe mathematical representation of the above information in a functional form is called a ***model***.\nSo, for the food recipe example, our model is:\n\nChances (Probability) of the meal being edible = $f($ $\\theta_1 \\times$ `Chilly_Powder` + \n$\\theta_2 \\times$ `Sugar` +\n$\\theta_3 \\times$ `Salt` +\n$\\theta_4 \\times$ `Pepper` +\n$\\theta_5 \\times$ `Broth_Oz` +\n$\\theta_6 \\times$ `Serves` $)$\n\n### Supervised, Unsupervised, and Semi-supervised learning {#sec-super}\n\nThe parameters, $\\theta_1, \\theta_2, ....\\theta_6$, represent the patterns in the given dataset and  the goal of a Machine Learning algorithm is to find values for $\\theta_1, \\theta_2, ....\\theta_6$, so that I can reliably predict `Tastes` all the time. This type of machine learning problem, where I have information about the outcome of each attempt, is called ***supervised learning***. \n\nSuppose in our food recipe example, we didn't have information about if the meal was edible or not; finding patterns in the data is still possible. The type of machine learning problem, where I don't have information about the outcome of each attempt is called ***unsupervised learning***.  \n\nSometimes we use both supervised and unsupervised learning strategy to solve a problem and those types of machine learning problems are called ***semi-supervised learning***.\n\nNow let's learn how to implement a simple model for a supervised learning problem similar to the one we discussed above. \n\n\n## Implementing a simple model\n\nIn this section we'll learn how to implement a simple logistic regression model to predict if a woman is diabetic or not based on some of the medical information we have about that person. The dataset we are using in this section (refer @tbl-pima) is structurally similar to the food recipe example we had in the last section. Before getting into the nitty gritty details of model implementation, let's learn more about Logistic Regression.\n\n### Logistic Regression {}\n\nIn @sec-ml, we learned that a model is nothing but a mathematical representation of the relationship between the features (aka predictors) and the target. In the diabetes dataset, our target is the variable that predicts if a person is diabetic or not, and all other variables are considered features. We can represent this information in a general form as: \n\nProbability of being diabetic (i.e `Type` == 1) = \n\n$f($`NPreg`, `Glu`,`BP`, `Skin`, `BMI`, `Ped`, `Age`$) =$\n$$f(\\theta_1 \\times \\text{NPreg} +\n\\theta_2 \\times \\text{Glu} +\n\\theta_3 \\times \\text{BP} +\n\\theta_4 \\times \\text{Skin} +\n$$\n$$\n\\theta_5 \\times \\text{BMI} +\n\\theta_6 \\times \\text{Ped} +\n\\theta_7 \\times \\text{Age}) \\tag{1}$$\n\n\nIf we give a logistic parametric form to our function $f(.)$, then it's called the logistic regression model. A logistic function is defined as $$f(x) = \\frac{1}{1 + e^{-x}} \\tag{2}$$\n\nUsing equation $(2)$ on $(1)$ we get, \n\nProbability of being diabetic = \n$$\\frac{1}{1 + e^{- (\\theta_1 \\times \\text{NPreg} +\n\\theta_2 \\times \\text{Glu} +\n\\theta_3 \\times \\text{BP} +\n\\theta_4 \\times \\text{Skin} +\n\\theta_5 \\times \\text{BMI} +\n\\theta_6 \\times \\text{Ped} +\n\\theta_7 \\times \\text{Age})}} \\tag{3}$$\n\nApplying different parametric forms to equation (1) yields you different machine learning models. For e.g., if we had used an identity function i.e. $f(x) = x$, the model we got is called the linear regression model (*Note:* Linear Regression models are not used for classification problems. The type of the problem you are trying to solve always restricts the type of models you can use.). \n\nBy using an activation function where the function will return `Yes` if the value we get using equation (3) is greater than or equal to 0.50 and return `No` otherwise, we can get prediction from our model that is comparable to the target in our data. The discrepancy between our model's prediction and target is called the ***prediction error***. \n\nOnce we have a model defined and the data available, the next step is to use an algorithm to learn optimal values for $\\theta$'s so that I can predict values of the target consistently. The step where we use an algorithm to learn optimal values for $\\theta$'s is called ***model training*** and the data we used for training is called the ***training dataset*** in machine learning.\n\n### How do Models learn? {#sec-optimization}\n\nOptimization algorithms are what make model training (learning) possible. In this section, let's learn how they work from a birds-eye-view, as explaining the technicalities of how optimization algorithms work is beyond the scope of this textbook. \n\n![Schematic to understand the concept of model training.](images/logisticregression.jpg){fig.pos='h' #fig:logistic_reg}\n\nAn optimization algorithm learns pretty much the same way you learn things - through trail and error. With each trial, the goal of the optimization algorithm is to keep reducing the value of prediction error by manipulating the values for the model parameters ($\\theta$s). After several trials, we get to a point where the prediction error is in an acceptable range and reducing prediction error further is impossible or futile. At that point, we save the values of $\\theta$ that helped us to reach that particular prediction error value. These saved values for $\\theta$ are called the ***coefficients*** of our learned model and corresponds to the patterns that were present in our data. Using the learned coefficients of our model, we will be able to make predictions on data the model has never seen. The data that the model hasn't seen is called the ***test dataset*** and the prediction error we get on the test data is called the ***test error*** and the prediction error we were getting during training phase is called ***training error***.\n\n\nNow let's learn how to implement a logistic regression model and train them on the data we have \n\n### Step 1: Project environment activation and Package Installation {.unnumbered}\n\n***Note:*** We expect that you have created a separate folder for storing all the julia scripts you'll be developing as part of learning with this textbook. To open your project folder in VS Code, you can go to Menu --> File --> Open Folder. From the dialog box that pops up, you can choose the folder you created.\n\nIn order to make sure that you are always working in the correct project environment, have the following 2 lines of code towards beginning of every julia script you create:\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\nusing Pkg\nPkg.activate(\".\")\n```\n:::\n\n\n   - Instructions on how to create a new julia script is described in @sec-julia-files and @sec-julia-script\n\nIn this section we will require 3 packages (To learn how to install a package, refer @sec-install-package):\n\n- `RDatasets`: This package provides an easy access to a lot of toy datasets in machine learning.\n- `ScikitLearn`: One of the industry standard packages for doing machine learning projects. Provides utilities for model definition, training, testing, tuning, and much more.\n- `DataFrames`: A package for handling data in tabular form.\n\n### Step 2: Loading the packages {.unnumbered}\nTo load these packages, you can have the following line of code right below the code you wrote in step 1:\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\nusing ScikitLearn, RDatasets, DataFrames\n```\n:::\n\n\n- If you got an error while running the above line of code, most of the time it means one of the three things:\n  1. You haven't installed the package that you are trying to load.\n  2. You are in the wrong project environment. (This is why we highly recommend you to follow step 1 every time you create a new julia script.)\n  3. You have typed a wrong package name. The name of all packages in Julia are case sensitive.\n\n### Step 3: Loading the dataset {.unnumbered}\nIn this example, we will use the *Diabetes in Pima Indian Women dataset* (available via `RDatasets`). (Instruction on how to load a dataset that is available to you are a `.CSV` file is provided in the Appendix (@sec-appendix)). To load the dataset and show the first four observations, enter the following lines of code: \n\n::: {#tbl-pima .cell tbl-cap='Diabetes in Pima Indian Women dataset' execution_count=4}\n``` {.julia .cell-code}\ndiabetes = dataset(\"MASS\", \"Pima.te\");\nfirst(diabetes,4)\n```\n\n::: {.cell-output-display execution_count=4}\n```{=html}\n<div class=\"data-frame\"><p>4 rows Ã— 8 columns</p><table class=\"data-frame\"><thead><tr><th></th><th>NPreg</th><th>Glu</th><th>BP</th><th>Skin</th><th>BMI</th><th>Ped</th><th>Age</th><th>Type</th></tr><tr><th></th><th title=\"Int32\">Int32</th><th title=\"Int32\">Int32</th><th title=\"Int32\">Int32</th><th title=\"Int32\">Int32</th><th title=\"Float64\">Float64</th><th title=\"Float64\">Float64</th><th title=\"Int32\">Int32</th><th title=\"CategoricalArrays.CategoricalValue{String, UInt8}\">Catâ€¦</th></tr></thead><tbody><tr><th>1</th><td>6</td><td>148</td><td>72</td><td>35</td><td>33.6</td><td>0.627</td><td>50</td><td>Yes</td></tr><tr><th>2</th><td>1</td><td>85</td><td>66</td><td>29</td><td>26.6</td><td>0.351</td><td>31</td><td>No</td></tr><tr><th>3</th><td>1</td><td>89</td><td>66</td><td>23</td><td>28.1</td><td>0.167</td><td>21</td><td>No</td></tr><tr><th>4</th><td>3</td><td>78</td><td>50</td><td>32</td><td>31.0</td><td>0.248</td><td>26</td><td>Yes</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n- `dataset` is a function from `RDatasets` that provide a nice interface to load datasets in DataFrames format. The `dataset` function accepts two arguments: the data source, and the dataset name. In this case, the name of our dataset was `Pima.te` and the source was `MASS` package in R.\n  - **Trivia:** If you see a word with `()` ending, then it is a function. A function is a collection of commands (several lines of codes) sharing a collective single objective. Anything that is passed inside `()` are called arguments. In our example, the objective of `dataset` function was to return the dataset (`Pima.te`) from the source (`MASS`) we mentioned. \n- `diabetes` is the name we gave to the variable that stores the data that was returned from the `dataset` function. The variable name is arbitrary and you can give whatever name you like. However, it is always recommended to give meaningful names.\n\n### Step 4: Making sense of the dataset {.unnumbered}\nThe diabetes dataset that we are using in this section was collected by the US National Institute of Diabetes, Digestive, and Kidney Diseases from a population of women who were 21 years and older and were of Pima Indian heritage living near Phoenix, Arizona. The dataset contains the following information:\n\n- `NPreg`: Number of pregnancies\n- `Glu`: Plasma glucose concentration in an oral glucose tolerance test\n- `BP`: Diastolic blood pressure (mm Hg)\n- `Skin`: Triceps skin fold thickness (mm)\n- `BMI`: Body Mass Index ($\\frac{\\text{weight (Kg)}}{\\text{height (m)}^2}$)\n- `Ped`: Diabetic pedigree function\n- `Age`: age in years\n- `Type`: Diabetic or not (according to WHO criteria)\n\n\n\n### Accessing elements in the data {.unnumbered}\n\nNow let's take a small detour and learn how to access different cells and slice the data.\n\n- To access the $10^\\text{th}$ row in the data:\n\n\n  ::: {.cell tbl-caption='Tenth row in the data' execution_count=5}\n  ``` {.julia .cell-code}\n  diabetes[10,:]\n  ```\n  \n  ::: {#tenth_row .cell-output-display execution_count=5}\n  ```{=html}\n  <p>DataFrameRow (8 columns)</p><div class=\"data-frame\"><table class=\"data-frame\"><thead><tr><th></th><th>NPreg</th><th>Glu</th><th>BP</th><th>Skin</th><th>BMI</th><th>Ped</th><th>Age</th><th>Type</th></tr><tr><th></th><th title=\"Int32\">Int32</th><th title=\"Int32\">Int32</th><th title=\"Int32\">Int32</th><th title=\"Int32\">Int32</th><th title=\"Float64\">Float64</th><th title=\"Float64\">Float64</th><th title=\"Int32\">Int32</th><th title=\"CategoricalArrays.CategoricalValue{String, UInt8}\">Catâ€¦</th></tr></thead><tbody><tr><th>10</th><td>9</td><td>119</td><td>80</td><td>35</td><td>29.0</td><td>0.263</td><td>29</td><td>Yes</td></tr></tbody></table></div>\n  ```\n  :::\n  :::\n  \n  \n  - The first position in `[]` indicated the row, and the second position indicated column. If you want to choose all columns then you put `:` in the second position.   \n\n- To access the column `BMI`:\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\ndiabetes[5:9,:BMI]\n```\n\n::: {.cell-output-display execution_count=6}\n```\n5-element Vector{Float64}:\n 30.5\n 25.8\n 45.8\n 43.3\n 39.3\n```\n:::\n:::\n\n\n  - If you want to choose all rows, then you put `!` in the first position instead of `5:9`.\n\n- To select multiple columns:\n\n::: {.cell tbl-cap='Accessing multiple columns (for rows from 5:10)' execution_count=7}\n``` {.julia .cell-code}\ndiabetes[5:10,[:BMI,:Age]]\n```\n\n::: {.cell-output-display execution_count=7}\n```{=html}\n<div class=\"data-frame\"><p>6 rows Ã— 2 columns</p><table class=\"data-frame\"><thead><tr><th></th><th>BMI</th><th>Age</th></tr><tr><th></th><th title=\"Float64\">Float64</th><th title=\"Int32\">Int32</th></tr></thead><tbody><tr><th>1</th><td>30.5</td><td>53</td></tr><tr><th>2</th><td>25.8</td><td>51</td></tr><tr><th>3</th><td>45.8</td><td>31</td></tr><tr><th>4</th><td>43.3</td><td>33</td></tr><tr><th>5</th><td>39.3</td><td>27</td></tr><tr><th>6</th><td>29.0</td><td>29</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n- To select all columns except `Type`:\n\n::: {.cell tbl-cap='All columns except Type (for rows from 5:10)' execution_count=8}\n``` {.julia .cell-code}\ndiabetes[5:10,Not(:Type)]\n```\n\n::: {.cell-output-display execution_count=8}\n```{=html}\n<div class=\"data-frame\"><p>6 rows Ã— 7 columns</p><table class=\"data-frame\"><thead><tr><th></th><th>NPreg</th><th>Glu</th><th>BP</th><th>Skin</th><th>BMI</th><th>Ped</th><th>Age</th></tr><tr><th></th><th title=\"Int32\">Int32</th><th title=\"Int32\">Int32</th><th title=\"Int32\">Int32</th><th title=\"Int32\">Int32</th><th title=\"Float64\">Float64</th><th title=\"Float64\">Float64</th><th title=\"Int32\">Int32</th></tr></thead><tbody><tr><th>1</th><td>2</td><td>197</td><td>70</td><td>45</td><td>30.5</td><td>0.158</td><td>53</td></tr><tr><th>2</th><td>5</td><td>166</td><td>72</td><td>19</td><td>25.8</td><td>0.587</td><td>51</td></tr><tr><th>3</th><td>0</td><td>118</td><td>84</td><td>47</td><td>45.8</td><td>0.551</td><td>31</td></tr><tr><th>4</th><td>1</td><td>103</td><td>30</td><td>38</td><td>43.3</td><td>0.183</td><td>33</td></tr><tr><th>5</th><td>3</td><td>126</td><td>88</td><td>41</td><td>39.3</td><td>0.704</td><td>27</td></tr><tr><th>6</th><td>9</td><td>119</td><td>80</td><td>35</td><td>29.0</td><td>0.263</td><td>29</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n### Step 5: Choosing the features and the target {.unnumbered}\n\nOur goal in this chapter is to define a supervised machine learning model that can predict if a woman is diabetic or not given their pregnancy history, glucose level, blood pressure, skin fold thickness, BMI, diabetic pedigree function, and their age. \n\nIf the value we have to predict is a category, that's called a ***classification problem *** and if the value we had to predict was numeric, it's called a ***regression problem***. Both the examples (food recipe and diabetes) we discussed in this chapter are classification problems. In the food recipe example the categories of the target were: `Non-Edible`, `Edible`, `Average`, and `Best`. For the diabetes dataset, the categories of the target are `Yes` and `No` indicating if a woman is diabetic or not.\n\nWe can use the data slicing skills we learned in the previous section to extract the features and the target from the data: \n\n::: {.cell execution_count=9}\n``` {.julia .cell-code}\nfeatures = Array(diabetes[!, Not(:Type)]);\ntarget = Array(diabetes[!, :Type]);\n```\n:::\n\n\n- The first line selects all columns except the `Type` column and saves them as an Array in the variable `features`\n- The second line selects just the `Type` column and saves them as an Array in the variable `target`\n\n### Step 6: Creating a Model Instance {.unnumbered}\n\nLogistic regression model is one of the most simple, common, and baseline model we use for classification problems. To create a logistic regression model instance, we can import the Logistic Regression function from `linear_models` in `ScikitLearn` package. \n\n::: {.cell execution_count=10}\n``` {.julia .cell-code}\n@sk_import linear_model: LogisticRegression;\nsimplelogistic = LogisticRegression();\n```\n:::\n\n\n- The line `simplelogistic=LogisticRegression()` creates an empty logistic regression model object which can store information about the model, data, learning algorithm, and learned parameters. The fields that are stored in a model object varies depending on the model you are defining.\n- the variable name `simplelogistic` is arbitrary and you can give whatever name you like. \n- If you are going to create another model instance (say a neural network model), don't reuse the variable name. It's better to choose a different variable name each time you are defining a new model.  \n\n### Step 7: Training your model {.unnumbered}\n\nIn @sec-optimization, you learned how an optimization algorithm helps the model to learn patterns in the data. The `fit!` function from `ScikitLearn` implements that procedure. \n\n::: {.cell execution_count=11}\n``` {.julia .cell-code}\nfit!(simplelogistic, features, target);\n```\n:::\n\n\n- the `fit!` function takes three arguments: the model you want to train, the features, and the target.\n  - Whenever you see an exclamation mark in functions, it means that the function is mutating (changing) the values of one or more arguments passed to that function. In this case `fit!` function is changing the values of $\\theta$, which is part of the model definition.\n\nNow you have a logistic regression model (`simplelogistic`) that's trained on Pima diabetes dataset. To see the learned values for $\\theta$, you can run the following line of code:\n\n::: {.cell execution_count=12}\n``` {.julia .cell-code}\nsimplelogistic.coef_\n```\n\n::: {.cell-output-display execution_count=12}\n```\n1Ã—7 Matrix{Float64}:\n 0.138633  0.0373939  -0.00897535  0.0134173  0.0783658  0.921752  0.0190434\n```\n:::\n:::\n\n\nYou can plug in these values into equation (3) to reliably compute the probability of a woman being diabetic. \n\n### Code Summary for Chapter 2 {.unnumbered}\n\n```julia\n# Activating the local project environment \nusing Pkg\nPkg.activate(\".\")\n\n# Loading the packages \nusing ScikitLearn, RDatasets, DataFrames\n\n# Loading the dataset\ndiabetes = dataset(\"MASS\", \"Pima.te\");\nfirst(diabetes,4)\n\n# Choosing the features and target\nfeatures = Array(diabetes[!, Not(:Type)])\ntarget = Array(diabetes[!, :Type])\n\n# Creating a logistic regression model instance \n@sk_import linear_model: LogisticRegression\nsimplelogistic = LogisticRegression()\n\n# Training the model \nfit!(simplelogistic, features, target)\n\n# Viewing the learned parameters \nsimplelogistic.coef_\n\n```\n\nIn the next chapter, we will learn how to check if our trained model is a good one or not.\n\n",
    "supporting": [
      "firstmodel_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}